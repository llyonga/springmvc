<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       						http://www.springframework.org/schema/beans/spring-beans.xsd 
       						http://www.springframework.org/schema/context 
       						http://www.springframework.org/schema/context/spring-context.xsd
       						http://www.springframework.org/schema/tx 
                     		http://www.springframework.org/schema/tx/spring-tx.xsd 
                     		http://www.springframework.org/schema/aop 
                     		http://www.springframework.org/schema/aop/spring-aop.xsd">

	<description>spring context</description>

	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
	<context:component-scan base-package="com.io.ssm">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!--配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat,log4j" />

	</bean>

	<!--配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!--配置加载mybatis-config配置文件 -->
		<property name="configLocation" value="classpath:spring/mybatis-config.xml" />
		<!--配置扫描的mapp.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/io/ssm/module/*Dao.xml" />
		<!--配置实体类的别名 -->
		<property name="typeAliasesPackage" value="com.io.ssm" />
	</bean>

	<!-- mapper配置 MapperFactoryBean：根据mapper接口生成代理对象 此方法问题：需要针对每个mapper进行配置，麻烦 -->

	<!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		//mapperInterface指定mapper接口 <property name="mapperInterface" value="com.io.ssm.mapper.UserMapper"/> 
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/> </bean> -->

	<!--配置mapper代理方式 -->
	<bean id="mapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--配置扫描的包 -->
		<property name="basePackage" value="com.io.ssm" />

		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!--配置扫描MyRepository注解 -->
		<property name="annotationClass"
			value="com.io.ssm.system.framework.persistence.annotation.MyRepository" />
	</bean>

	<!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--注解方式       配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" />
            <!-- 可以采用更加详细的方式 -->
            <!-- <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="delAndRepair" propagation="REQUIRED" />

            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />

            <tx:method name="*" propagation="SUPPORTS" /> -->
        </tx:attributes>
    </tx:advice>
    
    <!-- 第一个*代表所有的返回值类型 
		第二个*代表所有的类
		第三个*代表类所有方法 最后一个..代表所有的参数 -->
    <aop:config>
        <aop:pointcut id="interceptorPointCuts"
            expression="execution(* com.io.ssm.module.*Service.*(..))" />
        <aop:advisor advice-ref="txAdvice"
            pointcut-ref="interceptorPointCuts" />        
    </aop:config>
    
    <!-- 配置ApplicationContext工具类，这样随时随地可以取到 -->
    <bean id="springContextUtil" class="com.io.ssm.system.framework.spring.utils.context.SpringContextUtil"></bean>

</beans>